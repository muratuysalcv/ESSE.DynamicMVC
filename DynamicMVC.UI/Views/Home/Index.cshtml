@model List<DynamicMVC.UI.DB.app>
@{
                ViewBag.Title = "Apps";
}
<h1>
    VUE.JS
</h1>
<div id="watch-example">
    <p>
        Ask a yes/no question:
        <input v-model="question">
    </p>
    <p>{{ answer }}</p>
    <div v-if="Math.random() > 0.5">
        Now you see me
    </div>
    <div v-else>
        Now you don't
    </div>
    <div v-if="type === 'A'">
        A
    </div>
    <div v-else-if="type === 'B'">
        B
    </div>
    <div v-else-if="type === 'C'">
        C
    </div>
    <div v-else>
        Not A/B/C
    </div>
    <template v-if="loginType === 'username'">
        <label>Username</label>
        <input placeholder="Enter your username">
    </template>
    <template v-else>
        <label>Email</label>
        <input placeholder="Enter your email address">
    </template>
</div>

<script>
    var watchExampleVM = new Vue({
        el: '#watch-example',
        data: {
            question: '',
            answer: 'I cannot give you an answer until you ask a question!',
            type: 'A',
            loginType: 'username'
        },
        watch: {
            // whenever question changes, this function will run
            question: function (newQuestion, oldQuestion) {
                this.answer = 'Waiting for you to stop typing...'
                this.debouncedGetAnswer()
            }
        },
        created: function () {
            this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)
        },
        methods: {
            getAnswer: function () {
                if (this.question.indexOf('?') === -1) {
                    this.answer = 'Questions usually contain a question mark. ;-)'
                    return
                }
                this.answer = 'Thinking...'
                var vm = this
                axios.get('https://yesno.wtf/api')
                    .then(function (response) {
                        vm.answer = _.capitalize(response.data.answer)
                    })
                    .catch(function (error) {
                        vm.answer = 'Error! Could not reach the API. ' + error
                    })
            }
        }
    })
</script>



<div id="cards-extended">
    <div class="card">
        <div class="card-content">
            <h4 class="card-title">Apps</h4>
            <p>

            </p>
            <div class="row">
                @foreach (var item in Model)
                {
                    <div class="col s12 m3">
                        <div class="card gradient-shadow gradient-45deg-light-blue-cyan border-radius-3">
                            <div class="card-content center">
                                <i class="glyphicon glyphicon-check"></i>
                                <h5 class="white-text lighten-4">
                                    <a href="@Url.Action("App","Dashboard",new { id=item.system_name })" style="color:#fff" ckass="">
                                        @item.name
                                        @if (item.app_icon != null)
                                        {
                                            @Html.Raw(item.app_icon.render_html())
                                        }
                                    </a>
                                </h5>
                                <p class="white-text lighten-4">
                                    @item.description

                                </p>



                            </div>
                        </div>
                    </div>
                }


            </div>
        </div>
    </div>
</div>
